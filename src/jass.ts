import * as fs from "fs";
import postcss from "postcss";
import postcssNested from "postcss-nested";
import keyParser from "./module/key-parser";
import applyExtends from "./module/extends";
import preParse from "./module/pre-parse";
import parse from "./module/parse";
import url from "./module/url";
import applyShorthand from "./module/shorthand";
import type { CSSDeclaration } from "./utils/types";
import { pipe } from "./utils/types";

interface PostcssConfig {
  plugins?: any[];
}

async function postProcess(css: string, postcssConfig: PostcssConfig = {}) {
  return await postcss([
    postcssNested,
    require("autoprefixer"),
    ...(postcssConfig?.plugins || [])
  ]).process(css, { from: undefined })
}

const compile = (obj: CSSDeclaration | string) => {
  const object = typeof obj === "object" ? obj : require(obj);
  
  let css = '';
  const styleFn = pipe(keyParser, url, applyExtends, applyShorthand, preParse, parse)

  try {
    css = styleFn(object) as unknown as string
  } catch (e) {
    throw e
  }
  return css as unknown as string;
};

const compileToProps = (style: CSSDeclaration) => {
  const props = {};
  
  function parse(style: Record<any, any>) {
    let style$ = '';
    let properties = {};

    for (const [property, value] of Object.entries(style)) {
      properties[property] = value;
    }

    for (const [property, value] of Object.entries(properties)) {
      style$ += `${property}: ${value}; `;
    }

    return { "style": style$.trim() };
  }
 
  const styleFn = pipe(keyParser, url, applyExtends, applyShorthand, preParse, parse);
  for (const key in style) {
    props[key] = styleFn(style[key]) as ReturnType<typeof parse>
    Object.defineProperty(props, `_${key}`, {
      get() {
        return style[key]
      }
    })
  }

  return props;
}

const createCss = (objPath: CSSDeclaration | string, output: string) => {
  try {
    const css = compile(objPath);
    const currentYear = new Date().getFullYear();

    postProcess(css)
      .then((result) => {
        fs.writeFileSync(
          output,
          "/** css file generated by Jass;\n" +
            "* CODE GEN: JASS\n" +
            `* Year: ${currentYear}\n` +
            "* CSS3 W3C\n" +
            "*/\n" +
            result.css +
            "\n/* END OF FILE */"
        );
        if (result.map) {
          fs.writeFileSync(output + ".map", result.map.toString());
        }
      });
      
    return "success";
  } catch (error) {
    console.error(error);
    
    return "error";
  }
};

const transpile = async (obj: CSSDeclaration | string, postcssConfig: PostcssConfig = {}) => {
  const css = compile(obj);

  const result = await postProcess(css, postcssConfig);

  return result;
};

export {
  compile,
  createCss,
  transpile,
  postProcess,
  compileToProps
};
